<%- include("partials/header.ejs") %>

    <style>
        body {
            background-color: #f3f4f6;
            color: #1f2937;
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 800px;
            margin: 20px auto;
            padding: 20px;
            background-color: #ffffff;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            margin-left: 372px;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .header h1 {
            font-size: 1.5rem;
            font-weight: bold;
        }
        .header button {
            padding: 10px 20px;
            background-color: #10b981;
            color: #ffffff;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }
        .header button:hover {
            background-color: #059669;
        }
        .search-bar {
            margin-bottom: 20px;
        }
        .search-bar input {
            width: 50%;
            padding: 8px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            outline: none;
        }
        .search-bar input:focus {
            border-color: #3b82f6;
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5);
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid #e5e7eb;
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #f9fafb;
        }
        .actions button {
            padding: 5px 10px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
        }
        .actions .block {
            background-color: #ef4444;
            color: #ffffff;
        }
        .actions .block:hover {
            background-color: #dc2626;
        }
        .actions .unblock {
            background-color: #10b981;
            color: #ffffff;
        }
        .actions .unblock:hover {
            background-color: #059669;
        }
        .actions .edit {
            background-color: #3b82f6;
            color: #ffffff;
        }
        .actions .edit:hover {
            background-color: #2563eb;
        } .actions .delete {
            background-color: #e11d48;
            color: #ffffff;
        }
        .actions .delete:hover {
            background-color: #be123c;
        } .pagination {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 20px;
    }
    .pagination button {
        padding: 5px 10px;
        border: 1px solid #d1d5db;
        border-radius: 4px;
        background: white;
        cursor: pointer;
    }
    .pagination button.active {
        background: #3b82f6;
        color: white;
    }
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
    }
    .modal-content {
        position: relative;
        background-color: white;
        margin: 15% auto;
        padding: 20px;
        border-radius: 8px;
        width: 80%;
        max-width: 500px;
    }
    .close {
        position: absolute;
        right: 10px;
        top: 10px;
        font-size: 20px;
        cursor: pointer;
    }.modal-content input[type="text"] {
    width: 100%;
    padding: 8px;
    margin: 10px 0;
    border: 1px solid #d1d5db;
    border-radius: 6px;
    outline: none;
}

.modal-content button {
    padding: 8px 16px;
    background-color: #10b981;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    margin-top: 10px;
}

.modal-content button:hover {
    background-color: #059669;
}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Brand Management</h1>
            <button onclick="openAddModal()">+ Add Brand</button>
        </div>
        
        <div class="search-bar">
            <input 
                type="text" 
                placeholder="Search brands..." 
                id="searchInput"
                value="<%= search %>"
                onkeyup="handleSearch(event)"
            >
        </div>
    
        <table>
            <thead>
                <tr>
                    <th>Brand Name</th>
                    <th>Status</th>
                    <th class="actions">Actions</th>
                </tr>
            </thead>
            <tbody id="brandTable">
                <% brands.forEach(brand => { %>
                <tr data-brand-id="<%= brand._id %>">
                    <td><%= brand.brandName %></td>
                    <td><%= brand.isBlocked ? 'Blocked' : 'Active' %></td>
                    <td class="actions">
                        <button 
                            class="<%= brand.isBlocked ? 'unblock' : 'block' %>"
                            onclick="toggleBlock('<%= brand._id %>')"
                        >
                            <%= brand.isBlocked ? 'Unblock' : 'Block' %>
                        </button>
                        <button class="edit" onclick="openEditModal('<%= brand._id %>', '<%= brand.brandName %>')">Edit</button>
                        <button class="delete" onclick="deleteBrand('<%= brand._id %>')">Delete</button>
                    </td>
                </tr>
                <% }); %>
            </tbody>
        </table>
    
        <div class="pagination">
            <% for(let i = 1; i <= totalPages; i++) { %>
                <button 
                    onclick="changePage('<%= i %>')"
                    class="<%= Number(currentPage) === i ? 'active' : '' %>"
                >
                    <%= i %>
                </button>
            <% } %>
        </div>
    
    <!-- Add Brand Modal -->
    <div id="addModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeAddModal()">&times;</span>
            <h2>Add New Brand</h2>
            <form id="addBrandForm" onsubmit="addBrand(event)">
                <input 
                    type="text" 
                    id="newBrandName" 
                    name="brandName"
                    placeholder="Enter brand name"
                    required
                >
                <button type="submit">Add Brand</button>
            </form>
        </div>
    </div>
    
    <!-- Edit Brand Modal -->
    <div id="editModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeEditModal()">&times;</span>
            <h2>Edit Brand</h2>
            <input type="text" id="editBrandName">
            <input type="hidden" id="editBrandId">
            <button onclick="updateBrand()">Update</button>
        </div>
    </div>
    <script>
   // Utility function to show/hide modals
function openAddModal() {
    document.getElementById('addModal').style.display = 'block';
}

function closeAddModal() {
    document.getElementById('addModal').style.display = 'none';
}

function openEditModal(brandId, brandName) {
    document.getElementById('editModal').style.display = 'block';
    document.getElementById('editBrandId').value = brandId;
    document.getElementById('editBrandName').value = brandName;
}

function closeEditModal() {
    document.getElementById('editModal').style.display = 'none';
}

// Search functionality
function handleSearch(event) {
    if (event.key === 'Enter') {
        const searchValue = event.target.value;
        window.location.href = `/admin/brands?search=${encodeURIComponent(searchValue)}`;
    }
}

// Pagination
function changePage(page) {
    const searchParams = new URLSearchParams(window.location.search);
    searchParams.set('page', page);
    window.location.href = `/admin/brands?${searchParams.toString()}`;
}

// Brand operations
async function updateBrand() {
    const brandId = document.getElementById('editBrandId').value;
    const brandName = document.getElementById('editBrandName').value.trim();

    if (!brandName) {
        alert('Please enter a brand name');
        return;
    }

    try {
        const response = await fetch('/admin/brand/update', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ brandId, brandName })
        });

        const data = await response.json();
        
        if (data.success) {
            closeEditModal();
            window.location.reload();
        } else {
            alert(data.message || 'Failed to update brand');
        }
    } catch (error) {
        console.error('Error updating brand:', error);
        alert('Failed to update brand. Please try again.');
    }
}

async function toggleBlock(brandId) {
    try {
        const response = await fetch('/admin/brand/toggle-block', {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ brandId })
        });

        const data = await response.json();
        
        if (data.success) {
            window.location.reload();
        } else {
            alert(data.message || 'Failed to toggle brand status');
        }
    } catch (error) {
        console.error('Error toggling brand status:', error);
        alert('Failed to toggle brand status. Please try again.');
    }
}

async function deleteBrand(brandId) {
    if (!confirm('Are you sure you want to delete this brand?')) {
        return;
    }

    try {
        const response = await fetch('/admin/brand/delete', {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ brandId })
        });

        const data = await response.json();
        
        if (data.success) {
            window.location.reload();
        } else {
            alert(data.message || 'Failed to delete brand');
        }
    } catch (error) {
        console.error('Error deleting brand:', error);
        alert('Failed to delete brand. Please try again.');
    }
}

async function addBrand(event) {
    event.preventDefault(); // Prevent form submission from refreshing the page
    
    const brandName = document.getElementById('newBrandName').value.trim();
    
    if (!brandName) {
        alert('Please enter a brand name');
        return;
    }

    try {
        const response = await fetch('/admin/brand/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify({ brandName: brandName }) // Make sure to use brandName as the key
        });

        const data = await response.json();
        
        if (response.ok) { // Check if response was successful
            closeAddModal();
            window.location.reload();
        } else {
            alert(data.message || 'Failed to add brand');
        }
    } catch (error) {
        console.error('Error adding brand:', error);
        alert('Failed to add brand. Please try again.');
    }
}
</script>
</body>
</html>

