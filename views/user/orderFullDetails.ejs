  <%- include("partials/profileHeader.ejs") %>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
  <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <style>
       body {
            font-family: Arial, sans-serif;
            background-color: #f2f7f5;
            margin: 20px;
        }

        .container {
            max-width: 900px;
            margin: auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            width: 870px;
            height: 800px;
        }

        .back-button {
            display: flex;
            align-items: center;
            text-decoration: none;
            color: #007bff;
            font-weight: bold;
            margin-bottom: 10px;
            font-size: 14px;
        }

        .back-button:hover {
            text-decoration: underline;
        }.btn-secondary {
    background-color: #6c757d;
    color: white;
    cursor: not-allowed;
}

        .order-header {
            background: linear-gradient(90deg, #0033cc, #0052cc);
            color: white;
            padding: 15px;
            border-radius: 8px 8px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 14px;
        }

        .order-header span {
            background: rgba(255, 255, 255, 0.2);
            padding: 5px 12px;
            border-radius: 20px;
            font-size: 12px;
        }

        .order-content {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-top: 15px;
            flex-wrap: wrap;
        }

        .product-section {
            flex: 1;
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            min-width: 300px;
        }

        .product {
            display: flex;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }

        .product img {
            width: 80px;
            border-radius: 5px;
        }

        .order-summary {
            width: 250px;
            background: #eef1f6;
            padding: 15px;
            border-radius: 8px;
            align-self: flex-start;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            font-size: 14px;
            margin-bottom: 8px;
        }

        .summary-total {
            font-weight: bold;
            font-size: 16px;
        }

        .status {
            display: inline-block;
            background: #ffeb99;
            color: #333;
            padding: 5px 10px;
            border-radius: 5px;
            font-weight: bold;
            font-size: 12px;
        }

        .section {
            background: #f8f9fa;
            padding: 15px;
            margin-top: 15px;
            border-radius: 8px;
        }

        .buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            flex-wrap: wrap;
            gap: 10px;
        }

        .btn {
            padding: 10px 15px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            flex-grow: 1;
            text-align: center;
            margin: 5px;
        }

        .return-btn {
            background-color: #28a745;
            color: white;
        }

        .cancel-btn {
            background-color: #dc3545;
            color: white;
        }

        

        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            width: 80%;
            max-width: 500px;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            border-bottom: 1px solid #eee;
            padding-bottom: 10px;
        }

        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: black;
        }

        .return-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .return-form textarea {
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
            min-height: 100px;
            resize: vertical;
        }

        .form-buttons {
            display: flex;
            justify-content: flex-end;
            gap: 10px;
        }

       
        @media screen and (max-width: 768px) {
            .order-content {
                flex-direction: column;
            }
            
            .product-section, .order-summary {
                width: 100%;
                margin-bottom: 15px;
            }
            
            .buttons {
                flex-direction: column;
            }
            
            .modal-content {
                width: 90%;
                margin: 30% auto;
            }
        }
    </style>
</head>
<body>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <div class="container">
        <!-- Back Button -->
        <a href="/user/order" class="back-button">← Back to Orders</a>

        <div class="order-header">
            <h3>Order Details</h3>
            <span>Order ID: <%= orders[0].orderItem._id %></span>
            <span><%= new Date(orders[0].createdOn).toLocaleDateString("en-US", { day: '2-digit', month: 'long', year: 'numeric' }) %></span>
        </div>

        <div class="order-content">
            <!-- Product Section -->
            <div class="product-section">
                <h4>Products</h4>
                <% orders.forEach(order => { %>
                    <div class="product">
                        <img src="<%= orders[0].productDetails[0].images[0] %>" alt="Product">
                        <div>
                            <p><strong><%= orders[0].productDetails[0].name %></strong></p>
                            <p>Price: ₹ <%= orders[0].orderItem.price %></p>
                            <p><strong>Total: ₹ <%= totalPrice %></strong></p>
                        </div>
                    </div>
                <% }) %>
            </div>
        </div>

        <% orders.forEach(element => { %>
            <div class="section">
                <h4>Shipping Address</h4>
                <p><strong><%= element.addressDetails[0].name %></strong></p>
                <p><%= element.addressDetails[0].addressType %></p>
                <p><%= element.addressDetails[0].state %></p>
                <p><%= element.addressDetails[0].city %></p>
                <p><%= element.addressDetails[0].phone %></p>
            </div>
        <% }) %>
       
        <div class="section">
            <h4>Order Status</h4>
            <span class="status"><%= orders[0].orderItem.status %></span>
        </div>
        

        <div class="buttons">
            <% if ( orders[0].orderItem.status != "cancel" &&  orders[0].orderItem.status !== "delivered" && orders[0].orderItem.status!=="Return Request" ) { %>
                        <button class="btn cancel-btn" data-order-id="<%= orders[0]._id %>" data-item-id="<%= orders[0].orderItem._id %>">❌ Cancel Item</button>

            <% } %>
            <% if (orders[0].orderItem.status !="Return Request") { %>
                        <button class="btn return-btn" id="returnBtn" data-order-id="<%= orders[0]._id %>" data-item-id="<%= orders[0].orderItem._id %>">↩ Request Return</button>

            <% } %>

        
        </div>
    </div>

    <!-- Return Reason Modal -->
    <div id="returnModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h4>Return Request</h4>
                <span class="close">&times;</span>
            </div>
            <form class="return-form">
                <div>
                    <label for="returnReason"><strong>Please provide a reason for your return:</strong></label>
                    <textarea id="returnReason" name="returnReason" placeholder="Tell us why you want to return this item..." required></textarea>
                </div>
                <div class="form-buttons">
                    <button type="button" class="btn" style="background-color: #6c757d; color: white;" onclick="handleCancel('<%= orders[0]._id %>')">Cancel</button>
                    <button type="submit" class="btn" style="background-color: #28a745; color: white;" >Submit Return</button>
                  
                </div>
            </form>
        </div>
    </div>

    <script>
        const modal = document.getElementById("returnModal");
        const returnBtn = document.getElementById("returnBtn");
        const closeBtn = document.getElementsByClassName("close")[0];
        const cancelBtn = document.querySelector(".form-buttons .btn:first-child");

        returnBtn.onclick = function() {
            modal.style.display = "block";
        }

        closeBtn.onclick = function() {
            modal.style.display = "none";
        }

        cancelBtn.onclick = function() {
            modal.style.display = "none";
        }

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

       document.querySelector(".return-form").addEventListener('submit', function(e) {
    e.preventDefault();
    const reason = document.getElementById("returnReason").value;
    
   
    const modal = document.getElementById("returnModal");
    modal.style.display = "none";
    
   
    showToast("Return request submitted successfully!", "success");
    
 
    setTimeout(() => {
        window.location.href = "/user/order";
    }, 3000); 
});

      
     
async function handleCancelItem(orderId, specificItemId) {
    try {
        const response = await fetch('/user/cancelItem', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ orderId, specificItemId }),
        });

        const result = await response.json();

        if (result.success) {
            showToast("Item cancelled successfully!", "success");

            const cancelButton = document.querySelector(`.cancel-btn[data-order-id="${orderId}"]`);
            if (cancelButton) {
                cancelButton.textContent = "Cancelled";
                cancelButton.disabled = true;
                cancelButton.classList.remove("cancel-btn");
                cancelButton.classList.add("btn-secondary");
            }
        } else {
            showToast(result.message || "Failed to cancel the item.", "error");
        }
    } catch (error) {
        console.error("Error cancelling item:", error);
        showToast("An error occurred while cancelling the item.", "error");
    }
}

document.addEventListener("DOMContentLoaded", function () {
    const cancelButton = document.querySelector(".cancel-btn");
    if (cancelButton) {
        cancelButton.addEventListener("click", function () {
            const orderId = this.getAttribute("data-order-id");
            const specificItemId = this.getAttribute("data-item-id");

            if (orderId && specificItemId) {
                handleCancelItem(orderId, specificItemId);
            } else {
                showToast("Order ID or Item ID not found.", "warning");
            }
        });
    }
});


function showToast(message, icon = "success") {
    Swal.fire({
        toast: true,
        position: "top-end",
        icon: icon,
        title: message,
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer);
            toast.addEventListener('mouseleave', Swal.resumeTimer);
        }
    });
}


document.addEventListener("DOMContentLoaded", function () {
    const returnBtn = document.getElementById("returnBtn");
    const modal = document.getElementById("returnModal");
    const closeBtn = document.getElementsByClassName("close")[0];

    returnBtn.onclick = function () {
        modal.style.display = "block";
    };

    closeBtn.onclick = function () {
        modal.style.display = "none";
    };

    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = "none";
        }
    };

    document.querySelector(".return-form").onsubmit = async function (e) {
        e.preventDefault();

        const orderId = returnBtn.getAttribute("data-order-id");
        const itemId = returnBtn.getAttribute("data-item-id");
        const reason = document.getElementById("returnReason").value;

        try {
            const response = await fetch("/user/returnItem", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ orderId, itemId, reason }),
            });

            const result = await response.json();

            if (result.success) {
                showToast("Return request submitted successfully!", "success");
                modal.style.display = "none";

                returnBtn.textContent = "Return Requested";
                returnBtn.disabled = true;
                returnBtn.classList.remove("return-btn");
                returnBtn.classList.add("btn-secondary");
            } else {
                showToast(result.message || "Failed to request return.", "error");
            }
        } catch (error) {
            console.error("Error requesting return:", error);
            showToast("An error occurred while requesting the return.", "error");
        }
    };
});



    </script>
</body>
</html>