<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Ensure these are in your layout -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <%- include("partials/profileHeader.ejs") %>
  <title>Order Details</title>
  <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family:
          -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu,
          Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      }

      body {
        background-color: #f8f9fa;
        padding: 20px;
        color: #333;
        line-height: 1.6;
      }

      .container {
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
      }
 .retry-btn {
      background: linear-gradient(135deg, #ff416c, #ff4b2b);
      color: white;
      padding: 10px 20px;
      border-radius: 5px;
      border: none;
      cursor: pointer;
      transition: transform 0.2s;
    }
    .retry-btn:hover { transform: scale(1.05); }
    .status-badge.failed { background: #ffe0e0; color: #ff4444; }
    .status-badge.pending { background: #fff3d1; color: #ff9900; }
    .status-badge.paid { background: #e0ffe9; color: #00c851; }
      .card {
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        margin-bottom: 30px;
        overflow: hidden;
        transition:
          transform 0.3s ease,
          box-shadow 0.3s ease;
      }

      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 30px rgba(0, 0, 0, 0.12);
      }

      .card-header {
        padding: 25px;
        border-bottom: 1px solid #eee;
        background: linear-gradient(135deg, #6c7ae0 0%, #5b66d9 100%);
        color: white;
      }.pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
        gap: 10px;
      }
      .pagination a {
        padding: 8px 16px;
        text-decoration: none;
        color: #6c7ae0;
        border: 1px solid #6c7ae0;
        border-radius: 5px;
        transition: background-color 0.3s ease;
      }
      .pagination a:hover {
        background-color: #6c7ae0;
        color: white;
      }
      .pagination a.active {
        background-color: #6c7ae0;
        color: white;
      }

      .card-content {
        padding: 25px;
      }

      .card-footer {
        padding: 20px 25px;
        border-top: 1px solid #eee;
        background-color: #fcfcfc;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
      }

      .order-heading {
        font-size: clamp(18px, 5vw, 22px);
        font-weight: 700;
        margin-bottom: 8px;
        letter-spacing: 0.5px;
      }

      .order-date {
        color: rgba(255, 255, 255, 0.9);
        font-size: 15px;
        font-weight: 500;
      }

      .order-link {
        color: rgba(255, 255, 255, 0.9);
        font-size: 14px;
        text-decoration: none;
        display: block;
        margin-top: 12px;
        transition: color 0.2s ease;
        font-weight: 500;
      }

      .order-link:hover {
        color: white;
        text-decoration: underline;
      }

      .order-summary {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 25px;
        background-color: #f8f9fa;
        flex-wrap: wrap;
        gap: 10px;
      }

      .order-summary-label {
        color: #444;
        font-size: 15px;
        font-weight: 600;
        display: flex;
        align-items: center;
      }

      .order-summary-label::before {
        content: "";
        display: inline-block;
        width: 8px;
        height: 8px;
        background-color: #6c7ae0;
        border-radius: 50%;
        margin-right: 10px;
      }

      .order-total {
        text-align: right;
      }

      .order-total-label {
        color: #666;
        font-size: 14px;
        margin-bottom: 5px;
      }

      .order-total-value {
        font-size: clamp(18px, 5vw, 22px);
        font-weight: 700;
        color: #333;
      }

      .order-item {
        display: flex;
        padding: 20px 0;
        align-items: center;
        flex-wrap: wrap;
        gap: 20px;
      }

      .item-image {
        width: 100px;
        height: 100px;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        flex-shrink: 0;
      }

      .item-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
      }

      .item-image:hover img {
        transform: scale(1.05);
      }

      .item-details {
        flex: 1;
        min-width: 200px;
      }

      .item-name {
        font-size: clamp(16px, 4vw, 18px);
        font-weight: 600;
        margin-bottom: 8px;
        color: #222;
      }

      .item-meta {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        color: #555;
        font-size: 14px;
      }

      .item-meta span {
        background-color: #f0f2f5;
        padding: 4px 12px;
        border-radius: 20px;
        display: inline-flex;
        align-items: center;
        font-weight: 500;
      }

      .item-action {
        margin-left: auto;
      }

      .btn {
        padding: 10px 18px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        border: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        white-space: nowrap;
      }

      .btn-primary {
        background: linear-gradient(135deg, #6c7ae0 0%, #5a68d3 100%);
        color: white;
      }

      .btn-primary:hover {
        background: linear-gradient(135deg, #5a68d3 0%, #4a56c9 100%);
        box-shadow: 0 6px 10px rgba(108, 122, 224, 0.3);
        transform: translateY(-2px);
      }

      .btn-danger {
        background: linear-gradient(135deg, #e53935 0%, #d32f2f 100%);
        color: white;
      }

      .btn-danger:hover {
        background: linear-gradient(135deg, #d32f2f 0%, #c62828 100%);
        box-shadow: 0 6px 10px rgba(229, 57, 53, 0.3);
        transform: translateY(-2px);
      }

      .btn-support {
        background-color: transparent;
        color: #6c7ae0;
        font-weight: 600;
        box-shadow: none;
        padding: 10px 15px;
      }

      .btn-support:hover {
        background-color: rgba(108, 122, 224, 0.1);
      }

      .divider {
        height: 1px;
        background-color: #eee;
        margin: 0;
      }

      .status-badge {
        background-color: #e6f7f0;
        color: #00a86b;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 13px;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
      }

      .status-badge::before {
        content: "";
        display: inline-block;
        width: 8px;
        height: 8px;
        background-color: currentColor;
        border-radius: 50%;
        margin-right: 6px;
      }.btn-secondary {
  background: #6c757d;
  color: white;
  cursor: not-allowed;
}

.btn-secondary:hover {
  background: #5a6268;
  transform: none;
  box-shadow: none;
}

      /* Media Queries for Better Responsiveness */
      @media (max-width: 768px) {
        .container {
          padding: 0;
        }

        .card {
          border-radius: 12px;
          margin-bottom: 20px;
        }

        .card-header,
        .card-content,
        .card-footer {
          padding: 20px;
        }

        .order-summary {
          padding: 15px 20px;
        }
      }

      @media (max-width: 600px) {
        body {
          padding: 10px;
        }

        .card:hover {
          transform: none;
        }

        .order-item {
          padding: 15px 0;
        }

        .item-action {
          margin-left: 0;
          width: 100%;
        }

        .item-action .btn {
          width: 100%;
          justify-content: center;
        }

        .order-summary {
          flex-direction: column;
          align-items: flex-start;
          gap: 15px;
        }

        .order-total {
          text-align: left;
          width: 100%;
        }

        .card-footer {
          flex-direction: column;
          width: 100%;
        }

        .card-footer .btn {
          width: 100%;
        }

        .item-meta {
          gap: 8px;
        }

        .item-meta span {
          padding: 3px 8px;
          font-size: 13px;
        }
      }.btn-secondary {
  background: #6c757d;
  color: white;
  cursor: not-allowed;
}

.btn-secondary:hover {
  background: #5a6268;
  transform: none;
  box-shadow: none;
}  .retry-btn {
    background: linear-gradient(135deg, #ff416c, #ff4b2b);
    color: white;
    border: none;
    padding: 12px 20px;
    font-size: 18px;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    border-radius: 50px;
    display: block;
    margin: 20px auto;
    box-shadow: 0px 4px 10px rgba(255, 65, 108, 0.5);
    margin-right: 14px;
  }

  .retry-btn:hover {
    transform: scale(1.1);
    box-shadow: 0px 6px 15px rgba(255, 65, 108, 0.7);
  }

  .retry-btn:active {
    transform: scale(0.95);
    box-shadow: 0px 2px 5px rgba(255, 65, 108, 0.3);
  }.status-badge.failed {
  background: #ffe0e0;
  color: #ff4444;
}
.status-badge.pending {
  background: #fff3d1;
  color: #ff9900;
}
.status-badge.paid {
  background: #e0ffe9;
  color: #00c851;
}

      @media (max-width: 400px) {
        .item-image {
          width: 80px;
          height: 80px;
        }

        .card-header,
        .card-content,
        .card-footer {
          padding: 15px;
        }

        .order-summary {
          padding: 12px 15px;
        }
      }

      /* Add print styles */
      @media print {
        body {
          background-color: white;
          padding: 0;
        }

        .card {
          box-shadow: none;
          margin-bottom: 20px;
          break-inside: avoid;
        }

        .card-header {
          background: #f0f0f0 !important;
          color: black !important;
        }

        .btn {
          display: none;
        }

        .container {
          max-width: 100%;
        }
      }
    </style>
</head>
<body>
  
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <div class="container">
    <% orders.forEach(order => { %>
      <div class="card">
        <div class="card-header">
          <h1 class="order-heading">Order #LAPTOP-HUB- <%= order._id %></h1>
          <p class="order-date">Placed on <%= order.createdOn.toDateString() %></p>
          <a href="#" class="order-link">View full order details →</a>

          <% if (order.paymentStatus === 'failed' ) { %>
    <button class="retry-btn" data-order-id="<%= order._id %>">Retry Payment</button>
  <% } %>

  
        </div>

        <div class="order-summary">
          <div class="order-summary-label">ITEMS (<%= order.orderItem.length %>)</div>
          <div class="status-badge"><%= order.status %></div>
        </div>

        <div class="card">
          <div class="order-summary">
            <div class="order-summary-label">ORDER SUMMARY</div>
            <div class="order-total">
              <div class="order-total-label">TOTAL</div>
              <div class="order-total-value">₹<%= order.totalPrice.toFixed(2) %></div>
            </div>
          </div>

          <div class="divider"></div>

          <div class="card-content">
            <% order.orderItem.forEach((item, index) => { %>
              <div class="order-item">
                <div class="item-image">
                  <img src="<%= order.productDetails[index].images[0] %>" alt="<%= order.productDetails[index].name %>" />
                </div>
                <div class="item-details">
                  <h3 class="item-name"><%= order.productDetails[index].name %></h3>
                  <div class="item-meta">
                    <span>Quantity: <%= item.quantity %></span>
                    <span>Price: ₹<%= item.price %></span>
                  </div>
                </div>
                <div class="item-action">
                  <a href="/user/orderDetailss/<%= order._id %>?product=<%= item._id %>">
                    <button class="btn btn-primary">
                      View Details <span style="margin-left: 5px">›</span>
                      
                    </button>
                  </a>
                </div>
              </div>
            <% }) %>
          </div>

          <div class="card-footer">
            <button class="btn btn-danger cancel-order-btn" data-order-id="<%= order._id %>">
              Cancel Order
            </button>
            <button class="btn btn-support">Need Help?</button>
          </div>
        </div>
      </div>
    <% }) %>
    <div class="pagination">
      <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
      <% } %>
      <% for (let i = 1; i <= totalPages; i++) { %>
        <a href="?page=<%= i %>&limit=<%= limit %>" class="<%= i === currentPage ? 'active' : '' %>"><%= i %></a>
      <% } %>
      <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
      <% } %>
    </div>
  </div>

  <script>
 document.addEventListener('DOMContentLoaded', function() {
  const cancelButtons = document.querySelectorAll('.cancel-order-btn');

  cancelButtons.forEach(button => {
    button.addEventListener('click', async function() {
      const orderId = this.getAttribute('data-order-id');
      const button = this;

      try {
        const response = await fetch('/user/cancelOrder', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ orderId }),
        });

        const result = await response.json();

        if (result.success) {
          showToast('Order cancelled successfully!', 'success');

          button.textContent = 'Cancelled';
          button.disabled = true;
          button.classList.remove('btn-danger');
          button.classList.add('btn-secondary');

          const statusBadge = button.closest('.card').querySelector('.status-badge');
          if (statusBadge) {
            statusBadge.textContent = 'Cancelled';
            statusBadge.style.backgroundColor = '#ffe6e6';
            statusBadge.style.color = '#ff4d4d';
          }
        } else {
          showToast(result.message || 'Failed to cancel the order.', 'error');
        }
      } catch (error) {
        console.error('Error:', error);
        showToast('An error occurred while cancelling the order.', 'error');
      }
    });
  });
});


function showToast(message, icon = 'info') {
  Swal.fire({
    toast: true,
    position: 'top-end',
    icon: icon, 
    title: message,
    showConfirmButton: false,
    timer: 3000, 
    timerProgressBar: true,
  });
}

 
  // Retry Payment Handler - Fixed implementation
document.addEventListener('DOMContentLoaded', function() {
  const retryButtons = document.querySelectorAll('.retry-btn');
  
  retryButtons.forEach(button => {
    button.addEventListener('click', async function() {
      const orderId = this.getAttribute('data-order-id');
      
      try {
        const response = await fetch('/user/retryPayment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId })
        });
        
        if (!response.ok) {
          throw new Error('Failed to initiate payment');
        }
        
        const { key, amount, currency, order_id } = await response.json();
        
        const options = {
          key: key,
          amount: amount,
          currency: currency,
          order_id: order_id,
          name: "Laptop Hub",
          description: "Payment for order",
          handler: async function(response) {
            try {
              const verifyResponse = await fetch('/user/verifyPayment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  razorpayOrderId: order_id,
                  razorpayPaymentId: response.razorpay_payment_id,
                  razorpaySignature: response.razorpay_signature
                })
              });
              
              if (verifyResponse.ok) {
                showToast('Payment successful!', 'success');
                window.location.reload();
              } else {
                showToast('Payment verification failed', 'error');
              }
            } catch (error) {
              showToast('Payment verification error', 'error');
            }
          },
          prefill: {
            name: "Customer",
            email: "customer@example.com"
          },
          theme: {
            color: "#6c7ae0"
          }
        };
        
        const rzp = new Razorpay(options);
        
        rzp.on('payment.failed', async function(response) {
          try {
            await fetch('/user/paymentFailed', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ 
                razorpayOrderId: response.error.metadata.order_id,
                errorMessage: response.error.description
              })
            });
            showToast('Payment failed: ' + response.error.description, 'error');
          } catch (error) {
            showToast('Failed to record payment failure', 'error');
          }
        });
        
        rzp.open();
      } catch (error) {
        showToast('Failed to initiate payment. Please try again.', 'error');
        console.error('Error:', error);
      }
    });
  });
});

    // Cancel Order Handler
    document.querySelectorAll('.cancel-order-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const orderId = this.dataset.order-id;
        try {
          const response = await fetch('/user/cancelOrder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId })
          });
          
          if (response.ok) {
            this.disabled = true;
            this.textContent = 'Cancelled';
            Swal.fire('Success!', 'Order cancelled successfully.', 'success');
          }
        } catch (error) {
          Swal.fire('Error!', 'Failed to cancel order.', 'error');
        }
      });
    });
  </script>
</body>
</html>