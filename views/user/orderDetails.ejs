<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Ensure these are in your layout -->
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <%- include("partials/profileHeader.ejs") %>
  <title>Order Details</title>
  <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen, Ubuntu, Cantarell, "Open Sans", "Helvetica Neue", sans-serif;
      }

      body {
        background-color: #f8f9fa;
        padding: 20px;
        color: #333;
        line-height: 1.6;
         padding-bottom: 100px; /* add space for pagination */

      }

      .container {
        width: 100%;
        max-width: 800px;
        margin: 0 auto;
        margin-right: 350px;
      }

      /* Enhanced Pagination Styles */
.pagination-container {
  display: flex;
  justify-content: center;
  margin: 40px 0;
  width: 100%;
  position: fixed; 
  bottom: 20px;
  left: 0;
  right: 0;
  z-index: 1000; 
}

.pagination {
  background: #fff;
  padding: 7px;
  border-radius: 12px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  display: flex;
  flex-direction: row;
  align-items: center;
  flex-wrap: nowrap;
}

.pagination a {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  text-decoration: none;
  color: #4a5568;
  font-weight: 500;
  border-radius: 8px;
  transition: all 0.2s ease;
}

      .pagination a:hover:not(.active) {
        background: #f1f5f9;
        color: #3b82f6;
      }

      .pagination a.active {
        background: #3b82f6;
        color: white;
        font-weight: 600;
      }

      .pagination a.disabled {
        pointer-events: none;
        opacity: 0.5;
      }

      .pagination-separator {
        color: #cbd5e0;
        padding: 0 8px;
      }

      /* Modern Minimalistic Card Styles */
      .card {
        background-color: #fff;
        border-radius: 16px;
        box-shadow: 0 4px 24px rgba(0, 0, 0, 0.04);
        margin-bottom: 30px;
        overflow: hidden;
        border: 1px solid #e2e8f0;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
      }

      .card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
      }

      .card-header {
        padding: 24px;
        border-bottom: 1px solid #f1f5f9;
        background: linear-gradient(135deg, #6366f1 0%, #4f46e5 100%);
        color: white;
      }

      .order-heading {
        font-size: 1.25rem;
        font-weight: 700;
        margin-bottom: 8px;
      }

      .order-date {
        color: rgba(255, 255, 255, 0.9);
        font-size: 0.875rem;
        font-weight: 500;
      }

      .order-link {
        color: rgba(255, 255, 255, 0.9);
        font-size: 0.875rem;
        text-decoration: none;
        display: block;
        margin-top: 12px;
        transition: color 0.2s ease;
        font-weight: 500;
      }

      .order-link:hover {
        color: white;
        text-decoration: underline;
      }

      /* Status Badges */
      .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: capitalize;
      }

      .status-badge::before {
        content: "";
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 6px;
      }

      .status-badge.failed {
        background: #fee2e2;
        color: #dc2626;
      }
      .status-badge.failed::before {
        background-color: #dc2626;
      }

      .status-badge.pending {
        background: #fef3c7;
        color: #d97706;
      }
      .status-badge.pending::before {
        background-color: #d97706;
      }

      .status-badge.paid {
        background: #dcfce7;
        color: #16a34a;
      }
      .status-badge.paid::before {
        background-color: #16a34a;
      }

      .status-badge.cancelled {
        background: #f3f4f6;
        color: #6b7280;
      }
      .status-badge.cancelled::before {
        background-color: #6b7280;
      }

      /* Order Summary */
      .order-summary {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 24px;
        background-color: #f8fafc;
        border-bottom: 1px solid #f1f5f9;
      }

      .order-summary-label {
        color: #4a5568;
        font-size: 0.875rem;
        font-weight: 600;
      }

      .order-total-label {
        color: #64748b;
        font-size: 0.875rem;
        margin-bottom: 4px;
      }

      .order-total-value {
        font-size: 1.125rem;
        font-weight: 700;
        color: #1e293b;
      }

      /* Order Items */
      .order-item {
        display: flex;
        padding: 20px 24px;
        align-items: center;
        gap: 20px;
        border-bottom: 1px solid #f1f5f9;
      }

      .order-item:last-child {
        border-bottom: none;
      }

      .item-image {
        width: 80px;
        height: 80px;
        border-radius: 8px;
        overflow: hidden;
        flex-shrink: 0;
      }

      .item-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
      }

      .item-image:hover img {
        transform: scale(1.05);
      }

      .item-details {
        flex: 1;
        min-width: 0;
      }

      .item-name {
        font-size: 1rem;
        font-weight: 600;
        margin-bottom: 8px;
        color: #1e293b;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      .item-meta {
        display: flex;
        gap: 8px;
        flex-wrap: wrap;
      }

      .item-meta span {
        background-color: #f1f5f9;
        padding: 4px 10px;
        border-radius: 20px;
        font-size: 0.75rem;
        font-weight: 500;
        color: #4a5568;
      }

      .item-action {
        margin-left: auto;
      }

      /* Buttons */
      .btn {
        padding: 10px 16px;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        border: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        white-space: nowrap;
      }

      .btn-primary {
        background: #3b82f6;
        color: white;
      }

      .btn-primary:hover {
        background: #2563eb;
      }

      .btn-danger {
        background: #ef4444;
        color: white;
      }

      .btn-danger:hover {
        background: #dc2626;
      }

      .btn-secondary {
        background: #94a3b8;
        color: white;
        cursor: not-allowed;
      }

      .btn-secondary:hover {
        background: #94a3b8;
      }

      .btn-support {
        background-color: transparent;
        color: #3b82f6;
        font-weight: 600;
      }

      .btn-support:hover {
        background-color: rgba(59, 130, 246, 0.1);
      }

      /* Retry Button */
      .retry-btn {
        background: linear-gradient(135deg, #f43f5e, #e11d48);
        color: white;
        border: none;
        padding: 10px 20px;
        font-size: 0.875rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        border-radius: 8px;
        margin-top: 12px;
        display: inline-flex;
        align-items: center;
        gap: 8px;
      }

      .retry-btn:hover {
        background: linear-gradient(135deg, #e11d48, #be123c);
        transform: translateY(-1px);
      }

      .retry-btn:active {
        transform: translateY(0);
      }

      /* Card Footer */
      .card-footer {
        padding: 16px 24px;
        border-top: 1px solid #f1f5f9;
        background-color: #f8fafc;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 12px;
      }

      /* Empty State */
      .empty-state {
        text-align: center;
        padding: 60px 20px;
      }

      .empty-state img {
        max-width: 200px;
        margin-bottom: 24px;
      }

      .empty-state h3 {
        font-size: 1.25rem;
        color: #1e293b;
        margin-bottom: 12px;
      }

      .empty-state p {
        color: #64748b;
        max-width: 400px;
        margin: 0 auto 24px;
      }

      /* Responsive Adjustments */
      @media (max-width: 768px) {
        .order-item {
          flex-wrap: wrap;
        }

        .item-action {
          margin-left: 0;
          width: 100%;
          margin-top: 12px;
        }

        .card-footer {
          flex-direction: column;
          align-items: stretch;
        }

        .btn {
          width: 100%;
        }
      }

      @media (max-width: 480px) {
  .pagination {
    flex-wrap: nowrap;
    justify-content: center;
    overflow-x: auto;
    max-width: 90%;
    padding: 7px 10px;
  }

        .order-summary {
          flex-direction: column;
          align-items: flex-start;
          gap: 12px;
        }

        .order-total {
          width: 100%;
          text-align: left;
        }
          .pagination::-webkit-scrollbar {
    height: 3px;
  }
  
  .pagination::-webkit-scrollbar-thumb {
    background-color: #cbd5e0;
    border-radius: 3px;
  }
      }
    </style>
</head>
<body>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

  <% if (orders.length === 0) { %>
    <script>
      window.location.href="/user/noOrder"
    </script>
  <% } else { %>
    <div class="container">
      <% orders.forEach(order => { %>
        <div class="card">
          <div class="card-header">
            <h1 class="order-heading">Order #LAPTOP-HUB-<%= order._id %></h1>
            <p class="order-date">Placed on <%= order.createdOn.toDateString() %></p>
            <a href="#" class="order-link">View full order details →</a>

            <% if (order.paymentStatus === 'failed' ) { %>
              <button class="retry-btn" data-order-id="<%= order._id %>">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21.5 2v6h-6M21.34 15.57a10 10 0 1 1-.57-8.38"/>
                </svg>
                Retry Payment
              </button>
            <% } %>
          </div>

          <div class="order-summary">
            <div class="order-summary-label">ITEMS (<%= order.orderItem.length %>)</div>
            <div class="status-badge <%= order.paymentStatus.toLowerCase() %>">Payment: <%= order.paymentStatus %></div>
          </div>

          <div class="card">
            <div class="order-summary">
              <div class="order-summary-label">ORDER SUMMARY</div>
              <div class="order-total">
                <div class="order-total-label">TOTAL</div>
                <div class="order-total-value">₹<%= order.totalPrice.toFixed(2) %></div>
              </div>
            </div>

            <div class="card-content">
              <% order.orderItem.forEach((item, index) => { %>
                <div class="order-item">
                  <div class="item-image">
                    <img src="<%= order.productDetails[index].images[0] %>" alt="<%= order.productDetails[index].name %>" />
                  </div>
                  <div class="item-details">
                    <h3 class="item-name"><%= order.productDetails[index].name %></h3>
                    <div class="item-meta">
                      <span>Quantity: <%= item.quantity %></span>
                      <span>Price: ₹<%= item.price %></span>
                    </div>
                  </div>
                  <div class="item-action">
                    <a href="/user/orderDetailss/<%= order._id %>?product=<%= item._id %>">
                      <% if (item.status != 'cancel') { %>
                        <button class="btn btn-primary">View Details</button>
                      <% } %>
                    </a>
                  </div>
                </div>
              <% }) %>
            </div>

            <div class="card-footer">
              <% let x = 0 %>
              <% for (let index = 0; index < order.orderItem.length; index++) { %>
                <% if (order.orderItem[index].status !== "cancel" && order.orderItem[index].status !== "Return Request") { %>
                  <% x = 1 %>
                <% } %>
              <% } %>

              <% if (x == 0) { %>
                <button class="btn btn-secondary cancel-order-btn" data-order-id="<%= order._id %>" disabled>
                  Cancel Order
                </button>
              <% } else { %>
                <button class="btn btn-danger cancel-order-btn" data-order-id="<%= order._id %>">
                  Cancel Order
                </button>
              <% } %>

              <button class="btn btn-support">Need Help?</button>

              <% if (order.paymentStatus === "Paid" && x == 1) { %>
                <button class="btn btn-primary download-btn" onclick="downloadInvoice('<%= order._id %>')">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 8px;">
                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                    <polyline points="7 10 12 15 17 10"></polyline>
                    <line x1="12" y1="15" x2="12" y2="3"></line>
                  </svg>
                  Download Invoice
                </button>
              <% } %>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  <% } %>

  <!-- Enhanced Pagination -->
  <div class="pagination-container">
    <div class="pagination">
      <% if (currentPage > 1) { %>
        <a href="?page=<%= currentPage - 1 %>&limit=<%= limit %>">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </a>
      <% } else { %>
        <a class="disabled">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </a>
      <% } %>

      <% if (currentPage > 3) { %>
        <a href="?page=1&limit=<%= limit %>">1</a>
        <% if (currentPage > 4) { %>
          <span class="pagination-separator">...</span>
        <% } %>
      <% } %>

      <% for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) { %>
        <a href="?page=<%= i %>&limit=<%= limit %>" class="<%= i === currentPage ? 'active' : '' %>"><%= i %></a>
      <% } %>

      <% if (currentPage < totalPages - 2) { %>
        <% if (currentPage < totalPages - 3) { %>
          <span class="pagination-separator">...</span>
        <% } %>
        <a href="?page=<%= totalPages %>&limit=<%= limit %>"><%= totalPages %></a>
      <% } %>

      <% if (currentPage < totalPages) { %>
        <a href="?page=<%= currentPage + 1 %>&limit=<%= limit %>">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </a>
      <% } else { %>
        <a class="disabled">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </a>
      <% } %>
    </div>
  </div>

  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      if (window.razorpayInitialized) return;
      window.razorpayInitialized = true;
      
      if (typeof Razorpay === 'undefined') {
        const script = document.createElement('script');
        script.src = 'https://checkout.razorpay.com/v1/checkout.js';
        script.async = true;
        document.head.appendChild(script);
        script.onload = function() {
          initializeButtons();
        };
      } else {
        initializeButtons();
      }

      function initializeButtons() {
        // Retry Payment Buttons
        const retryButtons = document.querySelectorAll('.retry-btn');
        
        retryButtons.forEach(button => {
          const newButton = button.cloneNode(true);
          button.parentNode.replaceChild(newButton, button);
          
          newButton.addEventListener('click', async function() {
            const orderId = this.getAttribute('data-order-id');
            const originalText = this.innerHTML;

            try {
              this.disabled = true;
              this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...';

              const response = await fetch('/user/retryPayments', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId })
              });

              if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || 'Failed to initiate payment');
              }
              
              const data = await response.json();
              
              const options = {
                key: data.key,
                amount: data.amount,
                currency: data.currency,
                order_id: data.order_id,
                name: "Laptop Hub",
                description: "Payment for order",
                handler: async function(response) {
                  try {
                    const verifyResponse = await fetch('/user/verifyPayment', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({
                        razorpayOrderId: data.order_id,
                        razorpayPaymentId: response.razorpay_payment_id,
                        razorpaySignature: response.razorpay_signature
                      })
                    });
                    
                    if (verifyResponse.ok) {
                      showToast('Payment successful!', 'success');
                      window.location.reload();
                    } else {
                      const errorData = await verifyResponse.json();
                      showToast(errorData.error || 'Payment verification failed', 'error');
                      newButton.disabled = false;
                      newButton.innerHTML = originalText;
                    }
                  } catch (error) {
                    console.error('Payment verification error:', error);
                    showToast('Payment verification error', 'error');
                    newButton.disabled = false;
                    newButton.innerHTML = originalText;
                  }
                },
                prefill: {
                  name: "Customer",
                  email: "customer@example.com"
                },
                theme: {
                  color: "#6366f1"
                },
                modal: {
                  ondismiss: function() {
                    newButton.disabled = false;
                    newButton.innerHTML = originalText;
                  }
                }
              };
              
              const rzp = new Razorpay(options);
              
              rzp.on('payment.failed', async function(response) {
                console.error('Payment failed:', response.error);
                try {
                  await fetch('/user/paymentFailed', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                      razorpayOrderId: response.error.metadata.order_id,
                      errorMessage: response.error.description
                    })
                  });
                  showToast('Payment failed: ' + response.error.description, 'error');
                  newButton.disabled = false;
                  newButton.innerHTML = originalText;
                } catch (error) {
                  console.error('Failed to record payment failure:', error);
                  showToast('Failed to record payment failure', 'error');
                  newButton.disabled = false;
                  newButton.innerHTML = originalText;
                }
              });
              
              rzp.open();
            } catch (error) {
              console.error('Error initiating payment:', error);
              showToast('Failed to initiate payment: ' + error.message, 'error');
              this.disabled = false;
              this.innerHTML = originalText;
            }
          });
        });

        // Cancel Order Buttons
        const cancelButtons = document.querySelectorAll('.cancel-order-btn:not(:disabled)');
        
        cancelButtons.forEach(button => {
          const newButton = button.cloneNode(true);
          button.parentNode.replaceChild(newButton, button);
          
          newButton.addEventListener('click', async function() {
            const orderId = this.getAttribute('data-order-id');
            
            // Confirmation dialog
            const { isConfirmed } = await Swal.fire({
              title: 'Cancel Order?',
              text: "Are you sure you want to cancel this order?",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#ef4444',
              cancelButtonColor: '#94a3b8',
              confirmButtonText: 'Yes, cancel it!'
            });

            if (!isConfirmed) return;

            try {
              const response = await fetch('/user/cancelOrder', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId })
              });

              const result = await response.json();

              if (result.success) {
                showToast('Order cancelled successfully!', 'success');
                
                this.textContent = 'Cancelled';
                this.disabled = true;
                this.classList.remove('btn-danger');
                this.classList.add('btn-secondary');

                const statusBadge = this.closest('.card').querySelector('.status-badge');
                if (statusBadge) {
                  statusBadge.textContent = 'Cancelled';
                  statusBadge.className = 'status-badge cancelled';
                }
              } else {
                showToast(result.message || 'Failed to cancel the order.', 'error');
              }
            } catch (error) {
              console.error('Error cancelling order:', error);
              showToast('An error occurred while cancelling the order.', 'error');
            }
          });
        });
      }

      // Ensure initialization runs
      if (typeof Razorpay !== 'undefined') {
        initializeButtons();
      }
    });

    function showToast(message, icon = 'info') {
      if (typeof Swal !== 'undefined') {
        Swal.fire({
          toast: true,
          position: 'top-end',
          icon: icon,
          title: message,
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          background: '#ffffff',
          backdrop: false
        });
      } else {
        alert(message);
      }
    }

    function downloadInvoice(orderId) {
      fetch(`/user/download-invoice/${orderId}`, {
        method: 'GET',
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.blob();
      })
      .then(blob => {
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `Laptop-Hub-${orderId}.pdf`;
        document.body.appendChild(a);
        a.click();
        a.remove();
      })
      .catch(error => {
        console.error('Error downloading invoice:', error);
        showToast('Failed to download invoice.', 'error');
      });
    }
  </script>
</body>
</html>