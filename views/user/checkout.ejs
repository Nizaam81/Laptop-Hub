<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <!-- Payment gateway script -->
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        /* Base styles and reset */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f8f9fa;
            color: #333;
        }
        
        /* Main container */
        .container {
            width: 90%;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        /* Checkout header */
        .checkout-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: #fff;
            font-size: 24px;
            font-weight: 600;
            color: #333;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
        }
        
        /* Main checkout sections layout */
        .checkout-section {
            display: flex;
            flex-direction: row;
            gap: 20px;
            margin-top: 20px;
        }
        
        /* Left and right section common styles */
        .left-section, .right-section {
            background: white;
            padding: 25px;
            border-radius: 12px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
        }
        
        .left-section {
            flex: 3;
        }
        
        .right-section {
            flex: 2;
        }
        
        /* Section titles */
        .section-title {
            font-size: 20px;
            font-weight: 600;
            color: #2563eb; /* Modern blue */
            margin: 25px 0 15px 0;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
            display: flex;
            align-items: center;
        }
        
        .section-title i {
            margin-right: 10px;
        }
        
        /* Button styles */
        .button {
            width: 100%;
            padding: 12px 15px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.12);
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 8px;
        }
        
        .primary-btn {
            background-color: #2563eb;
            color: white;
            border: none;
        }
        
        .primary-btn:hover {
            background-color: #1d4ed8;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.25);
        }
        
        .secondary-btn {
            background: white;
            color: #333;
            border: 2px solid #e5e7eb;
        }
        
        .secondary-btn:hover {
            background: #f8f9fa;
            border-color: #d1d5db;
            transform: translateY(-2px);
        }
        
        /* Address section styles */
        .static-address {
            margin: 15px 0;
            padding: 15px;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .static-address:hover {
            border-color: #2563eb;
            box-shadow: 0 2px 8px rgba(37, 99, 235, 0.15);
            transform: translateY(-2px);
        }
        
        .static-address input[type="radio"] {
            margin-right: 10px;
            transform: scale(1.2);
            cursor: pointer;
        }
        
        .static-address label {
            display: flex;
            flex-direction: column;
            gap: 5px;
            cursor: pointer;
        }
        
        .static-address label p {
            margin: 2px 0;
        }
        
        .static-address label p:first-child {
            font-size: 18px;
            font-weight: 600;
            color: #2563eb;
        }
        
        /* Selected address style */
        .static-address input[type="radio"]:checked + label {
            font-weight: 500;
        }
        
        .static-address input[type="radio"]:checked + label p:first-child {
            color: #2563eb;
        }
        
        .static-address input[type="radio"]:checked ~ .static-address {
            border-color: #2563eb;
            background-color: #f0f7ff;
        }
        
        /* Payment method styles */
        .payment-method {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-top: 15px;
        }
        
        .payment-option {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 15px;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .payment-option:hover {
            border-color: #2563eb;
            box-shadow: 0 2px 8px rgba(37, 99, 235, 0.15);
            transform: translateY(-2px);
        }
        
        .payment-option input[type="radio"] {
            transform: scale(1.2);
            cursor: pointer;
        }
        
        /* Selected payment style */
        .payment-option input[type="radio"]:checked ~ .payment-option {
            border-color: #2563eb;
            background-color: #f0f7ff;
        }
        
        /* Order summary styles */
        .order-summary {
            background: #ffffff;
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        }
        
        .order-item {
            display: flex;
            align-items: center;
            gap: 15px;
            border-bottom: 1px solid #e5e7eb;
            padding-bottom: 15px;
            margin-bottom: 15px;
        }
        
        .order-item img {
            width: 70px;
            height: 70px;
            border-radius: 8px;
            object-fit: cover;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .order-item-details {
            flex: 1;
        }
        
        .order-item p {
            font-size: 14px;
            margin: 4px 0;
        }
        
        .price {
            font-size: 18px;
            font-weight: 600;
            color: #333;
        }
        
        .discount {
            color: #10b981;
            font-size: 14px;
            font-weight: 600;
        }
        
        /* Price summary section */
        .price-summary {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px dashed #e5e7eb;
        }
        
        .price-row {
            display: flex;
            justify-content: space-between;
            margin: 8px 0;
            font-size: 15px;
        }
        
        .total-price {
            font-size: 20px;
            font-weight: 700;
            margin-top: 15px;
            padding-top: 15px;
            border-top: 2px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
        }
        
        /* Coupon section */
        .coupon-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px dashed #e5e7eb;
            border-radius: 8px;
            background-color: #f9fafb;
            transition: all 0.3s ease;
        }
        
        .coupon-section:hover {
            border-color: #2563eb;
            background-color: #f0f7ff;
        }
        
        .coupon-input {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .coupon-input input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .coupon-input input:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
        }
        
        .apply-btn {
            padding: 10px 15px;
            background-color: #2563eb;
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .apply-btn:hover {
            background-color: #1d4ed8;
        }
        
        .applied-coupon {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            background-color: #ecfdf5;
            border: 1px solid #10b981;
            border-radius: 8px;
            margin-top: 10px;
        }
        
        .applied-coupon .coupon-code {
            font-weight: 600;
            color: #10b981;
        }
        
        .applied-coupon .remove-coupon {
            color: #ef4444;
            cursor: pointer;
            font-size: 18px;
        }
        
        /* Button container */
        .button-container {
            margin-top: 20px;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }/* Coupon Section Styling */
.coupon-section {
    padding: 20px;
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    background-color: #ffffff;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
}

.section-title {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    gap: 8px;
    color: #333;
}

.section-title i {
    color: #10b981;
}

/* Coupon Input */
.coupon-input {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
}

.coupon-input input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 6px;
    font-size: 14px;
    transition: 0.3s ease;
}

.coupon-input input:focus {
    border-color: #10b981;
    outline: none;
}

.apply-btn {
    background: #10b981;
    color: white;
    border: none;
    padding: 10px 18px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: 0.3s;
}

.apply-btn:hover {
    background: #0d8a6c;
}

/* Applied Coupon */
.applied-coupon {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #e6f7e9;
    color: #10b981;
    padding: 10px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: bold;
    margin-top: 10px;
    border-left: 4px solid #10b981;
}

.remove-coupon {
    cursor: pointer;
    color: #ff4d4d;
    font-size: 18px;
}

/* Available Coupons */
.available-coupons {
    margin-top: 20px;
    padding: 15px;
    border: 1px dashed #10b981;
    border-radius: 8px;
    background: #f6fff9;
    text-align: center;
}

.available-coupons h4 {
    font-size: 16px;
    color: #10b981;
    margin-bottom: 10px;
    font-weight: 600;
}

/* Coupon Cards */
.coupon-list {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.coupon-card {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px;
    border-radius: 8px;
    background: #ffffff;
    border: 1px solid #ddd;
    box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
    transition: 0.3s;
}

.coupon-card:hover {
    transform: scale(1.02);
}

.coupon-left {
    text-align: left;
}

.coupon-left h5 {
    margin: 0;
    font-size: 16px;
    font-weight: 600;
    color: #333;
}

.coupon-left p {
    margin: 2px 0 0;
    font-size: 13px;
    color: #666;
}

/* Apply Coupon Button */
.copy-btn {
    background: #10b981;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 13px;
    font-weight: 600;
    cursor: pointer;
    transition: 0.3s;
}

.copy-btn:hover {
    background: #0d8a6c;
}

        
        /* Responsive design */
        @media (max-width: 992px) {
            .container {
                width: 95%;
                margin-left: auto;
                margin-right: auto;
                padding: 15px;
            }
            
            .checkout-section {
                flex-direction: column;
            }
            
            .left-section, .right-section {
                width: 100%;
            }
        }
        
        @media (max-width: 768px) {
            .checkout-header {
                font-size: 20px;
                padding: 12px 15px;
            }
            
            .section-title {
                font-size: 18px;
            }
            
            .static-address label p:first-child {
                font-size: 16px;
            }
            
            .order-item img {
                width: 60px;
                height: 60px;
            }
        }
        
        @media (max-width: 576px) {
            .container {
                width: 100%;
                padding: 10px;
            }
            
            .left-section, .right-section {
                padding: 15px;
            }
            
            .static-address, .payment-option {
                padding: 10px;
            }
            
            .button {
                padding: 10px;
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <%- include("partials/profileHeader.ejs") %>
    
    <!-- Checkout header -->
    <div class="checkout-header">
        <span><i class="fas fa-shopping-cart"></i> Checkout</span>
    </div>
    
    <div class="container">
        <div class="checkout-section">
            <!-- Left section - Address and Payment -->
            <div class="left-section">
                <!-- Shipping Address Section -->
                <div class="section-title">
                    <i class="fas fa-map-marker-alt"></i> Shipping Address
                </div>
                
                <!-- Add Address Button -->
                <a href="addAddress">
                    <button class="button primary-btn">
                        <i class="fas fa-plus"></i> Add New Address
                    </button>
                </a>
                
                <!-- Address List -->
                <% if (Adress) { %>
                 <% Adress.address.forEach((element, index) => { %>
                    <div class="static-address">
                        <input type="radio" name="selectedAddress" value="<%= element._id %>" id="address-<%= index %>">
                        <label for="address-<%= index %>">
                            <p><%= element.name %></p>
                            <p><i class="fas fa-tag"></i> <%= element.addressType %></p>
                            <p><i class="fas fa-city"></i> <%= element.city %></p>
                            <p><i class="fas fa-landmark"></i> <%= element.landMark %></p>
                            <p><i class="fas fa-map-pin"></i> <%= element.pincode %></p>
                            <p><i class="fas fa-phone"></i> <%= element.phone %></p>
                        </label>
                    </div>
                <% }) %>
                <% } %>
                
                <!-- Payment Method Section -->
               <!-- Payment Method Section -->
<div class="section-title">
    <i class="fas fa-credit-card"></i> Payment Method
</div>

<!-- Payment Options -->
<div class="payment-method">
    <label class="payment-option">
                        <input type="radio" name="payment" value="cod" id="cod">
                        <i class="fas fa-money-bill-wave"></i> Cash On Delivery
                    </label>
                     <p id="popup" style="color: red; font-size: 14px;"></p>
                  


    <label class="payment-option" id="walletOption">
        <input type="radio" name="payment" value="wallet">
        <i class="fas fa-wallet"></i> Wallet
        <span id="walletBalance"> </span> <!-- Add this span to display wallet balance -->
    </label>
     <p id="walletAlert" style="color: red; font-size: 14px;"></p>
    <label class="payment-option">
        <input type="radio" name="payment" value="razorpay">
        <i class="fas fa-credit-card"></i> Razorpay
    </label>
</div>

            </div>
            
            
            <!-- Right section - Order Summary -->
<div class="right-section">
    <div class="order-summary">
        <!-- Order Summary Title -->
        <div class="section-title">
            <i class="fas fa-shopping-basket"></i> Order Summary
        </div>

        <!-- Order Items -->
        <% carts.forEach(element => { %>
            <div class="order-item">
                <img src="<%= element.productDetails[0].images[0] %>" alt="Product Image">
                <div class="order-item-details">
                    <p><strong><%= element.productDetails[0].name %></strong></p>
                    <p class="price">₹<%= element.variantDetails[0].price %></p>
                    <p><i class="fas fa-box"></i> Qty: <%= element.quantity %></p>
                </div>
            </div>
        <% }) %>

       <!-- Coupon Section -->
<div class="coupon-section">
    <div class="section-title">
        <i class="fas fa-tag"></i> Apply Coupon
    </div>
    
    <div class="coupon-input">
        <input type="text" id="couponCode" placeholder="Enter coupon code">
        <button class="apply-btn" id="applyCoupon">Apply</button>
    </div>

    <div class="applied-coupon" id="appliedCoupon" style="display: none;">
        <span class="coupon-code">WELCOME20</span>
        <i class="fas fa-times-circle remove-coupon" id="removeCoupon"></i>
    </div>

 
  <!-- Available Coupons Section -->
<div class="available-coupons">
    <h4>💳 Available Coupons</h4>
    <div class="coupon-list">
        <% availableCoupons.forEach(element => { %>
            <div class="coupon-card">
                <div class="coupon-left">
                    <h5><%= element.name %></h5>
                    <p>Minimum Purchase: $<%= element.minimumPrice %></p>
                </div>
                <% if (totalPrice === element.minimumPrice) { %>
                    <button class="copy-btn" onclick="applyCoupon('<%= element.name %>')">Apply</button>
                <% } else { %>
                    <button class="copy-btn" disabled>Not Eligible</button>
                <% } %>
            </div>
        <% }) %>
    </div>
</div>


</div>


        <!-- Price Summary -->
        <div class="price-summary">
            <div class="price-row">
                <span>Subtotal</span>
                <span>₹<%= totalPrice %></span>
            </div>
            <div class="price-row">
                <span>Shipping</span>
                <span>₹0</span>
            </div>
            <div class="price-row" id="discountRow" style="display: none; color: #10b981;">
                <span>Discount</span>
                <span>-₹<span id="discountAmount">0</span></span>
            </div>

            <div class="total-price">
                <span>Total</span>
                <span>₹<span id="finalPrice"><%= totalPrice %></span></span>
            </div>
            
</div>

        </div>

        <!-- Action Buttons -->
        <div class="button-container">
            <button class="button primary-btn" id="checkout">
                <i class="fas fa-lock"></i> Proceed to Checkout
            </button>
            <a href="/user/ProductsDetails">
                <button class="button secondary-btn">
                    <i class="fas fa-arrow-left"></i> Continue Shopping
                </button>
            </a>
        </div>
    </div>
</div>
<!-- Add a retry payment section -->
<div id="retryPaymentSection" style="display: none;">
    <div class="section-title">
        <i class="fas fa-credit-card"></i> Retry Payment
    </div>
    <button class="button primary-btn" id="retryPayment">
        <i class="fas fa-sync-alt"></i> Retry Payment
    </button>
</div>

   
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        
       let originalPrice = <%= typeof totalPrice !== 'undefined' ? totalPrice : 0 %>;
let finalPrice = originalPrice;
let appliedCoupon = null;


document.addEventListener("DOMContentLoaded", () => {
    console.log("Original Price on Load:", originalPrice);
    fetchAvailableCoupons(originalPrice);
});


async function fetchAvailableCoupons(totalPrice) {
    try {
        console.log("Fetching coupons for totalPrice:", totalPrice);

        const response = await fetch("/user/availableCoupons", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ totalPrice }),
        });

        const result = await response.json();
        console.log("Coupons received:", result);

        if (response.ok) {
            displayCoupons(result.coupons);
        } else {
            console.error("Error fetching coupons:", result.message);
        }
    } catch (error) {
        console.error("Error fetching coupons:", error);
    }
}


function displayCoupons(coupons) {
    const couponList = document.getElementById("availableCoupons");
    couponList.innerHTML = ""; 

    if (!coupons || coupons.length === 0) {
        couponList.innerHTML = "<p>No coupons available</p>";
        return;
    }

    coupons.forEach(coupon => {
        const couponItem = document.createElement("button");
        couponItem.textContent = `${coupon.name} - ₹${coupon.offerPrice} Off`;
        couponItem.classList.add("coupon-button");
        couponItem.onclick = () => applySelectedCoupon(coupon.name);
        couponList.appendChild(couponItem);
    });

    document.getElementById("couponSection").style.display = "block";
}


function applySelectedCoupon(couponCode) {
    document.getElementById("couponCode").value = couponCode;
}


document.getElementById("applyCoupon").addEventListener("click", async function() {
    const couponCode = document.getElementById("couponCode").value.trim();
    
    if (!couponCode) {
        Swal.fire({ icon: 'warning', title: 'Empty Coupon', text: 'Please enter a coupon code' });
        return;
    }

    try {
        console.log("Applying coupon:", couponCode);

        const response = await fetch("/user/couponApplied", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ couponCode, totalPrice: originalPrice }),
        });

        const result = await response.json();
        console.log("Apply Coupon Response:", result);

        if (response.ok) {
            const discount = result.discount || 0;
            finalPrice = originalPrice - discount;

            document.getElementById("discountAmount").textContent = discount;
            document.getElementById("discountRow").style.display = "flex";
            document.getElementById("finalPrice").textContent = finalPrice;
            document.getElementById("appliedCoupon").style.display = "flex";
            document.querySelector(".coupon-code").textContent = couponCode;
            document.getElementById("couponCode").value = "";

            Swal.fire({ icon: 'success', title: 'Coupon Applied!', text: `You've got ₹${discount} off!` });

            fetchAvailableCoupons(originalPrice); // Refresh available coupons
        } else {
            Swal.fire({ icon: 'error', title: 'Invalid Coupon', text: result.message });
        }
    } catch (error) {
        console.error("Error applying coupon:", error);
        Swal.fire({ icon: 'error', title: 'Something Went Wrong', text: 'Please try again later' });
    }
});





      document.getElementById("checkout").addEventListener("click", async (event) => {
    event.preventDefault();

    let selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
    if (!selectedAddress) {
        Swal.fire({
            icon: 'warning',
            title: 'Address Required',
            text: 'Please select a shipping address',
        });
        return;
    }

    let selectedPayment = document.querySelector('input[name="payment"]:checked');
    if (!selectedPayment) {
        Swal.fire({
            icon: 'warning',
            title: 'Payment Method Required',
            text: 'Please select a payment method',
        });
        return;
    }

    let cartItems = <%- JSON.stringify((carts || []).map(element => ({
        product: element?.productDetails?.[0]?._id || "",
        quantity: element?.quantity || 0,
        price: element?.variantDetails?.[0]?.price || 0
    }))) %>;

    let orderData = {
        orderItems: cartItems,
        totalPrice: finalPrice, 
        address: selectedAddress.value,
        paymentMethod: selectedPayment.value,
        coupon: appliedCoupon 
    };

    try {
        let response = await fetch("/user/placeOrder", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(orderData)
        });
        let result = await response.json();
    
        if(result.alert){
          document.getElementById('popup').innerHTML = result.alert;
          return;
        }
        if(result.error){
            document.getElementById("walletAlert").innerHTML = result.error;
            return;
        }

        if (response.ok) {
            if (selectedPayment.value === 'razorpay') {
                const options = {
                    key: result.key,
                    amount: result.amount,
                    currency: result.currency,
                    order_id: result.orderId,
                    name: "Laptop_Hub",
                    description: "Purchase Description",
                    handler: async function (response) {
                        try {
                            const paymentResponse = await fetch("/user/verifyPayment", {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/json"
                                },
                                body: JSON.stringify({
                                    razorpayOrderId: result.orderId,
                                    razorpayPaymentId: response.razorpay_payment_id,
                                    razorpaySignature: response.razorpay_signature
                                })
                            });

                            const paymentResult = await paymentResponse.json();

                            if (paymentResponse.ok) {
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Payment Successful!',
                                    text: 'Your order has been placed successfully.',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    window.location.href = "/user/profile";
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Failed!',
                                    text: paymentResult.message || 'Payment verification failed',
                                    confirmButtonText: 'Try Again'
                                });
                            }
                        } catch (error) {
                            console.error("Payment verification error:", error);
                            handlePaymentFailure(result.orderId, "Payment verification error");
                        }
                    },
                    // Add these critical event handlers
                    "modal": {
                        "ondismiss": function() {
                            // This triggers when user closes the modal without completing payment
                            handlePaymentFailure(result.orderId, "Payment cancelled by user");
                        }
                    },
                    "prefill": {
                        name: "Customer Name",
                        email: "customer@example.com",
                        contact: "9999999999"
                    },
                    "theme": {
                        color: "#2563eb"
                    }
                };

                const rzp = new Razorpay(options);
                
                // Add these event listeners to capture payment failures
                rzp.on('payment.failed', function(response) {
                    handlePaymentFailure(
                        result.orderId, 
                        `Payment failed: ${response.error.description} (${response.error.code})`
                    );
                });
                
                rzp.open();
                
            } else {
                Swal.fire({
                    icon: 'success',
                    title: 'Order Placed!',
                    text: 'Your order has been placed successfully.',
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.href = "/user/profile";
                });
            }
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Order Failed!',
                text: "Error: " + (result.message || "Unknown error"),
                confirmButtonText: 'Try Again'
            });
        }
    } catch (error) {
        console.error("Error placing order:", error);
        Swal.fire({
            icon: 'error',
            title: 'Something Went Wrong',
            text: 'Please try again later',
        });
    }
});

async function handlePaymentFailure(orderId, errorMessage) {
    console.log("Payment failed:", errorMessage);
    
    try {
        // Notify backend about payment failure
        const response = await fetch("/user/paymentFailed", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                razorpayOrderId: orderId,
                errorMessage: errorMessage
            })
        });
        
        const result = await response.json();
        
        // Show failure message to user
        Swal.fire({
            icon: 'error',
            title: 'Payment Failed',
            text: errorMessage,
            confirmButtonText: 'OK'
        }).then(() => {
            window.location.href = "/user/profile";
        });
    } catch (error) {
        console.error("Error handling payment failure:", error);
        Swal.fire({
            icon: 'error',
            title: 'Payment Failed',
            text: 'There was an error processing your payment',
            confirmButtonText: 'OK'
        }).then(() => {
            window.location.href = "/user/profile";
        });
    }
}

        
        document.querySelectorAll('.static-address input[type="radio"]').forEach(radio => {
            radio.addEventListener('change', function() {
                document.querySelectorAll('.static-address').forEach(addr => {
                    addr.style.borderColor = '#e5e7eb';
                    addr.style.backgroundColor = '#ffffff';
                });
                
                this.closest('.static-address').style.borderColor = '#2563eb';
                this.closest('.static-address').style.backgroundColor = '#f0f7ff';
            });
        });
        
        document.querySelectorAll('.payment-option input[type="radio"]').forEach(radio => {
            radio.addEventListener('change', function() {
                document.querySelectorAll('.payment-option').forEach(option => {
                    option.style.borderColor = '#e5e7eb';
                    option.style.backgroundColor = '#ffffff';
                });
                
                this.closest('.payment-option').style.borderColor = '#2563eb';
                this.closest('.payment-option').style.backgroundColor = '#f0f7ff';
            });
        });
 











async function applyCoupon(couponCode) {
    try {
        console.log("Applying coupon:", couponCode);

        // Validate coupon code
        if (!couponCode) {
            Swal.fire({ icon: 'warning', title: 'Empty Coupon', text: 'Please enter a coupon code' });
            return;
        }

        // Send request to apply coupon
        const response = await fetch("/user/couponApplied", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ couponCode, totalPrice: originalPrice }),
        });

        const result = await response.json();
        console.log("Apply Coupon Response:", result);

        if (response.ok) {
           
            const discount = result.discount || 0;
            finalPrice = originalPrice - discount;

           
            document.getElementById("discountAmount").textContent = discount;
            document.getElementById("discountRow").style.display = "flex";
            document.getElementById("finalPrice").textContent = finalPrice;
            document.getElementById("appliedCoupon").style.display = "flex";
            document.querySelector(".coupon-code").textContent = couponCode;
            document.getElementById("couponCode").value = "";

            // Show success message
            Swal.fire({ icon: 'success', title: 'Coupon Applied!', text: `You've got ₹${discount} off!` });

            // Refresh available coupons
            fetchAvailableCoupons(originalPrice);
        } else {
            // Show error message if the coupon is invalid
            Swal.fire({ icon: 'error', title: 'Invalid Coupon', text: result.message });
        }
    } catch (error) {
        console.error("Error applying coupon:", error);
        Swal.fire({ icon: 'error', title: 'Something Went Wrong', text: 'Please try again later' });
    }
}




document.getElementById("applyCoupon").addEventListener("click", function() {
    const couponCode = document.getElementById("couponCode").value.trim();
    applyCoupon(couponCode);
});


        

    </script>
</body>
</html>