<%- include('partials/head') %>
    
<%- include('partials/header') %> 
<!-- SweetAlert2 CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

<style>
   .product-images {
    display: flex;
    gap: 20px;
    position: relative; /* Add this */
}
.thumbnail-gallery {
    width: 80px;
    display: flex;
    flex-direction: column;
    gap: 10px;
}
    
    .thumbnail-item img {
      width: 100%;
      border: 1px solid #ddd;
      cursor: pointer;
      transition: border-color 0.3s;
    }
    
    .thumbnail-item img:hover {
      border-color: #2874f0;
    }
    
    .main-image-container {
    position: relative;
    width: 500px; /* Increased from 400px */
    height: 500px; /* Added fixed height */
    display: flex;
    justify-content: center;
    align-items: center;
}
    
.main-product-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
}
    
    .product-title {
      font-size: 1.5rem;
      color: #212121;
    }
    
    .current-price {
      font-size: 28px;
      font-weight: 500;
    }
    
    .offers-list {
      list-style: none;
      padding: 0;
    }
    
    .offer-item {
      margin-bottom: 8px;
    }
    
    .offer-item i {
      margin-right: 8px;
    }
    
    .action-buttons {
      margin-top: 20px;
    }
    
    .add-to-cart, .buy-now {
      padding: 15px 45px;
      font-size: 16px;
      text-transform: uppercase;
    }
    .main-image-container {
    position: relative;
    width: 400px;
    height: 400px;
}

.main-product-image {
    width: 100%;
    height: 100%;
    object-fit: contain;
}

.zoom-result {
    position: fixed;
    width: 800px;
    height: 800px;
    left: 45%; /* Adjust this value based on your layout */
    top: 50%;
    transform: translateY(-50%);
    border: 1px solid #ddd;
    background-repeat: no-repeat;
    display: none;
    z-index: 1000;
    background-color: white;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}.zoom-lens {
    display: none;
}


    .variant-btn {
      padding: 10px 20px;
      margin: 5px;
      border: 1px solid #ddd;
      background-color: white;
      cursor: pointer;
    }
    .variant-btn:hover, .variant-btn.active {
      border-color: #2874f0;
      color: #fff;
      background-color: #2874f0;
    }
    
    .quantity-btn {
      width: 40px;
      height: 40px;
      border: 1px solid #ddd;
      background: white;
      cursor: pointer;
    }
    .quantity-btn:hover {
      background-color: #f0f0f0;
    }
  



    </style>

    <div class="container-fluid mt-4">
      <div class="breadcrumb">
        <nav aria-label="breadcrumb">
          <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="/">Home</a></li>
            <li class="breadcrumb-item"><a href="/products">Products</a></li>
            <li class="breadcrumb-item active" aria-current="page"><%= products.name %></li>
          </ol>
        </nav>
      </div>
    
      <div class="row">
       
        <div class="col-md-5">
          <div class="product-images">
           
            <div class="thumbnail-gallery">
              <% products.images.forEach((image, index) => { %>
                <div class="thumbnail-item mb-2">
                  <img src="<%= image %>" 
                       alt="Product view <%= index + 1 %>"
                       class="img-fluid thumbnail"
                       onclick="updateMainImage(this.src)">
                </div>
              <% }) %>
            </div>
            
            
            <div class="main-image-container">
              <div class="zoom-lens"></div>
              <img src="<%= products.images[0] %>" 
                   id="mainImage"
                   alt="<%= products.name %>"
                   class="img-fluid main-product-image">
              <div class="zoom-result"></div> 
          </div>
          
          </div>
        </div>
    
      
        <div class="col-md-7">
          <div class="product-details ps-4">
            <h1 class="product-title mb-2"><%= products.name %></h1>
            
            <!-- Ratings -->
            <div class="ratings mb-3">
              <span class="badge bg-success"><%= products.rating %> ★</span>
              <span class="text-muted ms-2"><%= products.reviews %> Reviews</span>
            </div>
    
            <!-- Price Section -->
            <div class="pricing mb-4">
              <input type="hidden" id="variantId" value="<%= Variants._id %>">

                <h2 class="current-price" id="salePrice" >₹ <%= Variants.price %></h2>
                 <h3>Available Stock<%= Variants.quantity %></h3>
                  <h1 style="height: 40px; width: 40px;" ><%= products.offerPercentage%>%</h1>
             
              <div class="product-variants mb-3">
                <label class="fw-bold">System Memory:</label>
                <div class="variant-options">
                  <% varient.forEach(element => { %>
                    <button class="variant-btn" data-variant="8GB" onclick="window.location.href='/user/productView?productId=<%= products._id %>&varientId=<%= element._id  %>'"><%= element.ramSize %></button>
                  <% }) %>
                  <div class="quantity">
                    <button class="btn btn-info">-</button>
                    <span id="quantities" style="margin: 0 10px;" data-max="<%= Variants.quantity %>">1</span>
                    <button class="btn btn-info">+</button>
                </div>
               
                </div>
              </div>
              
           
             

            </div>
    
           
    
            <!-- Action Buttons -->
            <div class="action-buttons">
              <button class="btn btn-warning btn-lg me-2 add-to-cart" id="addToCart">
                <i class="fas fa-shopping-cart"></i> ADD TO CART
              </button>
              <button class="btn btn-success btn-lg buy-now">
                <i class="fas fa-bolt"></i> BUY NOW
              </button>
            </div>
    
            <!-- Product Description -->
            <div class="description mt-4">
              <h6>Description</h6>
              <p class="mt-2"><%= products.description %></p>
              <input type="hidden" id="ProductId" value="<%= products._id %>">
            </div>
          </div>
        </div>
      </div>
    </div>
  
 
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>

        const minusBtn = document.querySelector(".quantity .btn:first-child");
        const plusBtn = document.querySelector(".quantity .btn:last-child");
        const quantitySpan = document.querySelector(".quantity span");

        
        const maxQuantity = parseInt(quantitySpan.getAttribute("data-max"));

        plusBtn.addEventListener("click", function () {
            let currentValue = parseInt(quantitySpan.textContent);
            if (currentValue < maxQuantity) {  // Restrict to max quantity
                quantitySpan.textContent = currentValue + 1;
            }
        });

        minusBtn.addEventListener("click", function () {
            let currentValue = parseInt(quantitySpan.textContent);
            if (currentValue > 1) { 
                quantitySpan.textContent = currentValue - 1;
            }
        });
      
  document.getElementById("addToCart").addEventListener("click", async function(event){
    event.preventDefault(); 

    const productId = document.getElementById("ProductId").value;
    const varientId = document.getElementById("variantId").value;
    const quantities = document.getElementById("quantities").textContent.trim();


    try {
        const response = await fetch("/user/add-Cart", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ productId, varientId, quantities }) 
        });

        const data = await response.json();
       console.log(data)
        if (data.success) {
            Swal.fire({
                title: "Success",
                text: data.success,
                icon: "success",
            });
        } else if (data.existingCartItem) {
            Swal.fire({ 
                title: "Item Already in Cart",
                text: data.existingCartItem,
                icon: "warning",
            });
        } else if (data.variantDetails) {
            Swal.fire({
                title: "Variant Not Found",
                text: data.variantDetails,
                icon: "error",
            });
        } else {
            Swal.fire({
                title: "Error",
                text: "Something went wrong!",
                icon: "error",
            });
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire({
            title: "Error",
            text: "Failed to add item to cart!",
            icon: "error",
        });
    }
});


document.querySelectorAll('.variant-btn').forEach(button => {
      button.addEventListener('click', function() {
        document.querySelectorAll('.variant-btn').forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
      });
    });
    
    document.getElementById('increaseQty').addEventListener('click', function() {
      let quantityInput = document.getElementById('quantity');
      if (parseInt(quantityInput.value) < parseInt(quantityInput.max)) {
        quantityInput.value = parseInt(quantityInput.value) + 1;
      }
    });
    
    document.getElementById('decreaseQty').addEventListener('click', function() {
      let quantityInput = document.getElementById('quantity');
      if (parseInt(quantityInput.value) > parseInt(quantityInput.min)) {
        quantityInput.value = parseInt(quantityInput.value) - 1;
      }
    });

    function updateMainImage(src) {
      document.getElementById('mainImage').src = src;
    }

   
 
function updateMainImage(src) {
    const mainImage = document.getElementById('mainImage');
    mainImage.src = src;
    
  
    mainImage.setAttribute('data-highres', src);
    
   
    const zoomLens = document.querySelector(".zoom-lens");
    const zoomResult = document.querySelector(".zoom-result");
    zoomLens.style.display = "none";
    zoomResult.style.display = "none";
}


const mainImage = document.getElementById("mainImage");
    const zoomLens = document.querySelector(".zoom-lens");
    const zoomResult = document.querySelector(".zoom-result");

    function moveLens(e) {
        e.preventDefault();
        let rect = mainImage.getBoundingClientRect();
        let lensSize = zoomLens.offsetWidth / 2;

        let x = e.clientX - rect.left - lensSize;
        let y = e.clientY - rect.top - lensSize;

        x = Math.max(0, Math.min(x, rect.width - zoomLens.offsetWidth));
        y = Math.max(0, Math.min(y, rect.height - zoomLens.offsetHeight));

        zoomLens.style.left = x + "px";
        zoomLens.style.top = y + "px";

        let zoomLevel = 2;
        zoomResult.style.backgroundPosition = `-${x * zoomLevel}px -${y * zoomLevel}px`;
    }

    function initZoom() {
    const container = document.querySelector('.main-image-container');
    const mainImage = document.getElementById('mainImage');
    const zoomResult = document.querySelector('.zoom-result');
    
    function handleZoom(e) {
        const bounds = mainImage.getBoundingClientRect();
        
       
        const x = (e.clientX - bounds.left) / bounds.width;
        const y = (e.clientY - bounds.top) / bounds.height;
        
       
        const clampedX = Math.max(0, Math.min(1, x));
        const clampedY = Math.max(0, Math.min(1, y));

        
        zoomResult.style.backgroundImage = `url(${mainImage.src})`;
        zoomResult.style.backgroundSize = '100%';
        
       
        const posX = clampedX * 100;
        const posY = clampedY * 100;
        zoomResult.style.backgroundPosition = `${-posX}% ${-posY}%`;
    }

    
    container.addEventListener('mouseenter', () => {
        zoomResult.style.display = 'block';
        
       
        zoomResult.style.backgroundImage = `url(${mainImage.src})`;
        zoomResult.style.backgroundSize = '100%';
    });

   
    container.addEventListener('mousemove', handleZoom);

    
    container.addEventListener('mouseleave', () => {
        zoomResult.style.display = 'none';
    });
}


function updateMainImage(src) {
    const mainImage = document.getElementById('mainImage');
    mainImage.src = src;
    
  
    const zoomResult = document.querySelector('.zoom-result');
    zoomResult.style.display = 'none';
    
   
    initZoom();
}


window.addEventListener('load', initZoom);




    </script>



<%- include('partials/footer') %>