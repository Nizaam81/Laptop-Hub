<%- include("partials/profileHeader.ejs") %>
    <title>Create User Address</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #f4f4f4;
        }

        .container {
            width: 70%;
            max-width: 900px;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-left: 280px;
        }

        h2 {
            text-align: center;
            color: #2d6a4f;
            margin-bottom: 20px;
        }

        form {
            display: flex;
            flex-direction: column;
            margin-right: 550px;
        }

        .form-group {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .form-group label {
            width: 20%;
            font-weight: bold;
            color: #333;
        }

        .form-group input {
            width: 75%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
        }

        button {
            width: 100%;
            padding: 12px;
            background: #2d6a4f;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 18px;
            cursor: pointer;
            margin-top: 10px;
        }

        button:hover {
            background: #1b4d35;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .container {
                width: 90%;
            }

            .form-group {
                flex-direction: column;
            }

            .form-group label, .form-group input {
                width: 100%;
                margin-bottom: 5px;
            }
        }
    </style>
</head>
<body>
    <form id="editAddress">
        <input type="hidden" id="addressId" value="<%= address._id %>" >
       
        <input type="hidden" id="userid" value="<%= address.userId %>">
    
        <div class="form-group">
            <label>Address Type:</label>
            <input type="text" name="address_type" id="addressType" value="<%= address.addressType %>">
            <div id="error1" class="error-message"></div>
        </div>
    
        <div class="form-group">
            <label>Name:</label>
            <input type="text" name="name"  id="name" value="<%= address.name %>">
            <div id="error2" class="error-message"></div>
        </div>
    
        <div class="form-group">
            <label>City:</label>
            <input type="text" name="city"  id="city" value="<%= address.city %>">
            <div id="error3" class="error-message"></div>
        </div>
    
        <div class="form-group">
            <label>Landmark:</label>
            <input type="text" name="landmark" id="landmark" value="<%=address.landMark %>">
            <div id="error4" class="error-message"></div>
        </div>
    
        <div class="form-group">
            <label>State:</label>
            <input type="text" name="state"  id="state" value="<%= address.state %>">
            
        </div>
    
        <div class="form-group">
            <label>Pincode:</label>
            <input type="text" name="pincode"  id="pincode" value="<%= address.pincode %>">
        </div>
    
        <div class="form-group">
            <label>Phone:</label>
            <input type="tel" name="phone"  id="phone" value="<%= address.phone %>">
        </div>
    
        <div class="form-group">
            <label>Alternate Phone:</label>
            <input type="tel" name="alt_phone" id="alternatePhone" value="<%= address.altPhone %>">
        </div>
    
        <button type="submit">Update Address</button>
    </form>

    </form>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        
  document.getElementById("editAddress").addEventListener("submit", async (event) => {
    event.preventDefault();

    const addressId = document.getElementById("addressId").value.trim();
    const userId = document.getElementById("userid").value.trim();
    const addressType = document.getElementById("addressType").value.trim();
    const name = document.getElementById("name").value.trim();
    const city = document.getElementById("city").value.trim();
    const landmark = document.getElementById("landmark").value.trim();
    const state = document.getElementById("state").value.trim();
    const pincode = document.getElementById("pincode").value.trim();
    const phone = document.getElementById("phone").value.trim();
    const altPhone = document.getElementById("alternatePhone").value.trim();

    // Validation regex patterns
    const nameRegex = /^[A-Za-z\s]+$/;
    const cityStateRegex = /^[A-Za-z\s]+$/;
    const landmarkRegex = /^[A-Za-z0-9\s,.-]+$/;
    const pincodeRegex = /^\d{6}$/;
    const phoneRegex = /^[6-9]\d{9}$/;

    // Required fields validation
    if (!addressType || !name || !city || !state || !pincode || !phone) {
        Swal.fire("Error", "Please fill all required fields.", "error");
        return;
    }

    // Name validation
    if (!nameRegex.test(name)) {
        Swal.fire("Error", "Name should only contain alphabets and spaces.", "error");
        return;
    }

    // City and State validation
    if (!cityStateRegex.test(city)) {
        Swal.fire("Error", "City should only contain alphabets.", "error");
        return;
    }
    if (!cityStateRegex.test(state)) {
        Swal.fire("Error", "State should only contain alphabets.", "error");
        return;
    }

    // Landmark validation (optional, but should match the pattern if filled)
    if (landmark && !landmarkRegex.test(landmark)) {
        Swal.fire("Error", "Landmark can contain alphabets, numbers, and limited special characters.", "error");
        return;
    }

    // Pincode validation
    if (!pincodeRegex.test(pincode)) {
        Swal.fire("Error", "Pincode must be exactly 6 digits.", "error");
        return;
    }

    // Phone number validation
    if (!phoneRegex.test(phone)) {
        Swal.fire("Error", "Phone number must be 10 digits and start with 6, 7, 8, or 9.", "error");
        return;
    }

    // Alternate phone validation (optional, but should match the pattern if filled and be different from phone)
    if (altPhone) {
        if (!phoneRegex.test(altPhone)) {
            Swal.fire("Error", "Alternate phone number must be 10 digits and start with 6, 7, 8, or 9.", "error");
            return;
        }
        if (altPhone === phone) {
            Swal.fire("Error", "Alternate phone number should be different from the primary phone number.", "error");
            return;
        }
    }

    // Data to send
    const data = {
        userId,
        addressId,
        addressType,
        name,
        city,
        landmark,
        state,
        pincode,
        phone,
        altPhone
    };

    try {
        const response = await fetch("/user/updateAddress", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            Swal.fire({
                title: "Success!",
                text: "Edited Successfully",
                icon: "success",
                showConfirmButton: true
            }).then(() => {
                window.location.href = "/user/address";
            });
        } else {
            Swal.fire("Error", "Failed to update address.", "error");
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire("Error", "Something went wrong.", "error");
    }
});

// Button Enable/Disable Logic
const formInputs = document.querySelectorAll("#editAddress input, #editAddress select");
const submitButton = document.querySelector("#editAddress button[type='submit']");

function validateForm() {
    const requiredFields = ["addressType", "name", "city", "state", "pincode", "phone"];
    const isValid = requiredFields.every(id => document.getElementById(id).value.trim() !== "");
    submitButton.disabled = !isValid;
}

formInputs.forEach(input => {
    input.addEventListener("input", validateForm);
});

validateForm();

    </script>
    
</html>
